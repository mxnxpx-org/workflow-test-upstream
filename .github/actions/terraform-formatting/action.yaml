name: Terraform Formatting
description: Ensures proper Terraform formatting.

inputs:
  target:
    description: Target directory under terraform
    required: true

runs:
  using: composite
  steps:
    - uses: opentofu/setup-opentofu@ae80d4ecaab946d8f5ff18397fbf6d0686c6d46a # v1.0.3
      with:
        tofu_version: 1.6.2

    - name: Tofu Format
      id: fmt
      run: tofu fmt
      shell: bash
#      working-directory: './terraform/${{ inputs.target }}/'
      continue-on-error: true

    # Use the GraphQL API to commit changes, so we get automatic commit signing
    # The REST contents API can't be used as easily because it only supports making single file commits
    - name: Commit and push changes
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "[*] Commit and push changes"
        echo "inputs.target: ${{ inputs.target }}"
#        set -euo pipefail
#        additions=()
#        removed=()
#        while IFS= read -r -d $'\0' status_line; do
#            filename="${status_line:3}"
#            git_status="${status_line:0:2}"
#            if [ "$git_status" = "D " ]; then
#                removed+=("$filename")
#            else
#                additions+=("$filename")
#            fi
#        done < <(git status --porcelain=v1 -z)
#        if [ "${#additions[@]}" -eq 0 ] ; then
#          echo "No files updated, skipping commit"
#          exit 0
#        fi
#        commitMessage="chore: tofu fmt"
#        # for now, we ignore $removed files, but they could be handled similarly (it's just harder to send two lists of positional input files into jq)
#        # jq's iteration over inputs will skip over files with 0 lines (empty files)
#        jq \
#          --null-input \
#          --raw-input \
#          --arg repositoryNameWithOwner "${{ github.event.client_payload.github.payload.repository.full_name || github.event.repository.full_name }}" \
#          --arg branchName "${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}" \
#          --arg expectedHeadOid "${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}" \
#          --arg commitMessage "$commitMessage" \
#          '
#        {
#          "query": "mutation ($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { url } } }",
#          "variables": {
#            "input": {
#              "branch": {
#                "repositoryNameWithOwner": $repositoryNameWithOwner,
#                "branchName": $branchName
#              },
#              "message": {
#                "headline": $commitMessage
#              },
#              "fileChanges": {
#                "additions": [reduce inputs as $line ({}; .[input_filename] += [$line]) | map_values(join("\n")) | to_entries[] | {path: .key, contents: .value | @base64}]
#              },
#              "expectedHeadOid": $expectedHeadOid
#            }
#          }
#        }' "${additions[@]}" | curl https://api.github.com/graphql \
#          --silent \
#          --fail-with-body \
#          --oauth2-bearer "$(gh auth token)" \
#          --data @-
